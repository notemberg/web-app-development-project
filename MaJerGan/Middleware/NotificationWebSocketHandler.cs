using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Net.WebSockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace MaJerGan.Middleware
{
    public class NotificationWebSocketHandler
    {
        private static readonly Dictionary<string, WebSocket> _userSockets = new Dictionary<string, WebSocket>();

        public async Task Handle(HttpContext context, WebSocket webSocket, string userId)
        {
            Console.WriteLine($"‚úÖ User {userId} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket...");

            lock (_userSockets)
            {
                _userSockets[userId] = webSocket;
            }

            Console.WriteLine($"‚úÖ User {userId} ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");

            var buffer = new byte[1024 * 4];

            try
            {
                while (webSocket.State == WebSocketState.Open)
                {
                    var result = await webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), CancellationToken.None);

                    if (result.MessageType == WebSocketMessageType.Close)
                    {
                        Console.WriteLine($"‚ùå User {userId} ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket");
                        lock (_userSockets)
                        {
                            _userSockets.Remove(userId);
                        }
                        await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Closed", CancellationToken.None);
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è Error ‡πÉ‡∏ô WebSocket ‡∏Ç‡∏≠‡∏á User {userId}: {ex.Message}");
                lock (_userSockets)
                {
                    _userSockets.Remove(userId);
                }
            }
        }


        // public static async Task SendNotificationToUser(int userId, string message)
        // {
        //     string userIdKey = userId.ToString(); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Key
        //     Console.WriteLine($"debug {userId}: {message}");
        //     if (_userSockets.ContainsKey(userIdKey) && _userSockets[userIdKey].State == WebSocketState.Open)
        //     {
        //         Console.WriteLine($"üì© Sending notification to user {userId}: {message}");
        //         var buffer = Encoding.UTF8.GetBytes(message);
        //         await _userSockets[userId.ToString()].SendAsync(new ArraySegment<byte>(buffer, 0, buffer.Length), WebSocketMessageType.Text, true, CancellationToken.None);
        //     }
        // }

        public static async Task SendNotificationToUser(int userId, string message)
        {
            string userIdKey = userId.ToString(); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Key

            Console.WriteLine($"üõ† debug: ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ UserId {userIdKey}, ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {message}");

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!_userSockets.ContainsKey(userIdKey))
            {
                Console.WriteLine($"‚ö†Ô∏è Warning: UserId {userIdKey} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket");
                return;
            }

            if (_userSockets[userIdKey].State != WebSocketState.Open)
            {
                Console.WriteLine($"‚ö†Ô∏è Warning: WebSocket ‡∏Ç‡∏≠‡∏á UserId {userIdKey} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Open");
                _userSockets.Remove(userIdKey); // ‡∏•‡∏ö WebSocket ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                return;
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤ WebSocket ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            Console.WriteLine($"üì© Sending notification to user {userIdKey}: {message}");
            var buffer = Encoding.UTF8.GetBytes(message);
            await _userSockets[userIdKey].SendAsync(new ArraySegment<byte>(buffer, 0, buffer.Length), WebSocketMessageType.Text, true, CancellationToken.None);
        }

        public static async Task sendUpdateReadNotification(int userId)
        {
            string userIdKey = userId.ToString(); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Key

            Console.WriteLine($"üõ† debug: ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ UserId {userIdKey}");

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (!_userSockets.ContainsKey(userIdKey))
            {
                Console.WriteLine($"‚ö†Ô∏è Warning: UserId {userIdKey} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket");
                return;
            }

            if (_userSockets[userIdKey].State != WebSocketState.Open)
            {
                Console.WriteLine($"‚ö†Ô∏è Warning: WebSocket ‡∏Ç‡∏≠‡∏á UserId {userIdKey} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Open");
                _userSockets.Remove(userIdKey); // ‡∏•‡∏ö WebSocket ‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                return;
            }

            // ‚úÖ ‡∏ñ‡πâ‡∏≤ WebSocket ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            Console.WriteLine($"üì© Sending update read notification to user {userIdKey}");
            var buffer = Encoding.UTF8.GetBytes("update-read-notification");
            await _userSockets[userIdKey].SendAsync(new ArraySegment<byte>(buffer, 0, buffer.Length), WebSocketMessageType.Text, true, CancellationToken.None);
        }

    }
}
