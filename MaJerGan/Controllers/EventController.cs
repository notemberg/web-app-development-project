using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using MaJerGan.Data;
using MaJerGan.Models;
using Microsoft.EntityFrameworkCore;
using System.Security.Claims;
using System.Threading.Tasks;
using MaJerGan.Middleware;

namespace MaJerGan.Controllers
{
    public class EventController : Controller
    {
        private readonly ApplicationDbContext _context;

        public EventController(ApplicationDbContext context)
        {
            _context = context;
        }

        [Authorize]  // ‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà Login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏î‡πâ
        public IActionResult Create()
        {
            return View();
        }

        [Authorize]
        public async Task<IActionResult> Index()
        {
            var events = await _context.Events
            .Include(e => e.Creator) // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
            .Include(e => e.Participants) // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
            .ToListAsync();
            return View(events);
        }

        [HttpPost]
        public async Task<IActionResult> Create(Event model)
        {
            // if (ModelState.IsValid)
            // {
            //     _context.Events.Add(model);
            //     await _context.SaveChangesAsync();
            //     return RedirectToAction("Index");
            // }
            // return View(model);
            var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);

            if (userIdClaim == null)
            {
                return Unauthorized(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ User ID ‡πÉ‡∏´‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            }

            int userId = int.Parse(userIdClaim.Value); // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô int

            // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            model.CreatedBy = userId;

            _context.Events.Add(model);
            _context.SaveChanges();

            await WebSocketHandler.BroadcastMessage("New Event Added!");

            return RedirectToAction("Index");
        }

        [HttpGet]
        [Route("Event/Details/{id}")]
        public async Task<IActionResult> Details(int id)
        {
            var eventDetails = await _context.Events
        .Include(e => e.Creator) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        .Include(e => e.Participants)
        .ThenInclude(p => p.User) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á User ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
        .FirstOrDefaultAsync(e => e.Id == id);
            if (eventDetails == null)
            {
                return NotFound();
            }
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ä‡∏°

            eventDetails.ViewCount++;
            _context.Events.Update(eventDetails);
            await _context.SaveChangesAsync();
            return View(eventDetails);
        }

        [HttpPost]
        public async Task<IActionResult> Delete(int id)
        {
            var eventToDelete = await _context.Events.FindAsync(id);
            if (eventToDelete == null)
            {
                return NotFound();
            }

            _context.Events.Remove(eventToDelete);
            await _context.SaveChangesAsync();

            await WebSocketHandler.BroadcastMessage("Event Deleted!");
            return RedirectToAction("Index");
        }

        [Authorize]
        [HttpPost]
        public async Task<IActionResult> Join(int eventId)
        {
            var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim == null)
            {
                return Unauthorized();
            }

            int userId = int.Parse(userIdClaim.Value);

            var existingParticipation = await _context.EventParticipants
                .FirstOrDefaultAsync(p => p.EventId == eventId && p.UserId == userId);

            if (existingParticipation != null)
            {
                return BadRequest("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß");
            }

            var participation = new EventParticipant
            {
                EventId = eventId,
                UserId = userId,
                Status = 1 // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            };

            _context.EventParticipants.Add(participation);
            await _context.SaveChangesAsync();

            await WebSocketHandler.BroadcastMessage("Event Joined!");

            return RedirectToAction("Details", new { id = eventId });
        }

        [HttpGet]
        public async Task<IActionResult> GetHotEvents()
        {
            DateTime today = DateTime.UtcNow;

            var hotEvents = await _context.Events
                .Where(e => e.ExpiryDate >= today && !e.IsClosed) // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                .OrderByDescending(e => e.ViewCount) // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏ß‡∏¥‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                .Take(5) // ‚úÖ ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                .Select(e => new
                {
                    e.Id,
                    e.Title,
                    e.Tags,
                    e.ViewCount,
                    e.MaxParticipants,
                    e.Location,
                    CurrentParticipants = e.Participants.Count,
                    creator = e.Creator.Username // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
                })
                .ToListAsync();

            return Json(hotEvents);
        }



        [HttpGet]
        public async Task<IActionResult> GetRecentEvents(string orderBy = "desc")
        {
            bool isAscending = orderBy.ToLower() == "asc";
            DateTime today = DateTime.UtcNow;

            var eventsQuery = _context.Events
                .Include(e => e.Creator) // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Creator
                .Include(e => e.Participants) // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Participants
                .Where(e => e.ExpiryDate >= today) // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                .AsQueryable();

            var orderedEvents = isAscending
                ? await eventsQuery.OrderBy(e => e.CreatedAt).Take(3).ToListAsync()
                : await eventsQuery.OrderByDescending(e => e.CreatedAt).Take(3).ToListAsync();

            // ‚úÖ Debug ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Event ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÑ‡∏î‡πâ
            Console.WriteLine($"üü¢ Events Loaded: {orderedEvents.Count}");

            if (orderedEvents == null || !orderedEvents.Any())
            {
                Console.WriteLine("‚ùå No events found after filtering.");
                return Json(new { message = "No events available" });
            }

            var events = orderedEvents
    .Select(e => new
    {
        e.Id,
        Title = string.IsNullOrEmpty(e.Title) ? "No Title" : e.Title, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
        Description = string.IsNullOrEmpty(e.Description) ? "No Description" : e.Description, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
        e.EventTime,
        Tags = string.IsNullOrEmpty(e.Tags) ? "No Tags" : e.Tags, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
        //e.ViewCount,
        e.MaxParticipants,
        Location = string.IsNullOrEmpty(e.Location) ? "No Location" : e.Location, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
        //e.ExpiryDate,
        e.CreatedAt,
        CurrentParticipants = e.Participants?.Count ?? 0, // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
        Creator = e.Creator?.Username ?? "Unknown Creator" // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô null
    })
    .ToList();


            return Json(events);
        }

        [HttpGet]
        public async Task<IActionResult> GetEventUpcoming()
        {
            var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim == null)
            {
                Console.WriteLine($"‚ùå User not authenticated");
                return Unauthorized("‚ùå User not authenticated");
            }

            int userId = int.Parse(userIdClaim.Value); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ User ID ‡πÄ‡∏õ‡πá‡∏ô int
            Console.WriteLine($"üÜî Authenticated User ID: {userId}");

            var today = DateTime.UtcNow;

            var events = await _context.Events
                .Include(e => e.Creator)
                .Include(e => e.Participants)
                .Where(e => e.EventTime > today) // ‚úÖ ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                .Where(e => e.Participants != null && e.Participants.Any(p => p.UserId == userId)) // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
                .Select(e => new
                {
                    e.Id,
                    e.Title,
                    e.EventTime,
                    e.Location,
                    CurrentParticipants = e.Participants.Count,
                    Creator = e.Creator != null ? e.Creator.Username : "Unknown"
                })
                .ToListAsync();

            return Json(events);
        }

        [Authorize]
        [HttpGet]
        public IActionResult Chat(int id)
        {
            var eventExists = _context.Events.Any(e => e.Id == id);
            if (!eventExists)
            {
                return NotFound();
            }

            return View(id); // ‡∏™‡πà‡∏á EventId ‡πÑ‡∏õ‡∏ó‡∏µ‡πà View
        }

        public async Task<IActionResult> Search(string searchQuery, string sortOrder)
        {
            var events = _context.Events
                .Include(e => e.Creator)
                .Include(e => e.Participants)
                .Where(e => e.ExpiryDate >= DateTime.UtcNow) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
                .Where(e => !e.IsClosed) // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
                .AsQueryable();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ searchQuery ‡∏´‡∏£‡∏∑‡∏≠ selectedTag ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
            if (!string.IsNullOrEmpty(searchQuery))
            {
                events = events.Where(e => e.Title.Contains(searchQuery));
            }

            // ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° sortOrder
            switch (sortOrder)
            {
                case "recent":
                    events = events.OrderBy(e => e.CreatedAt);
                    break;
                case "popular":
                    events = events.OrderByDescending(e => e.ViewCount);
                    break;
                case "NerestEvent":
                    events = events.OrderBy(e => e.EventTime);
                    break;
                default:
                    events = events.OrderBy(e => e.Title);
                    break;
            }

            var eventList = await events.ToListAsync();
            if (eventList == null)
            {
                // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á View ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                eventList = new List<MaJerGan.Models.Event>();
            }

            return View(eventList); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á View
        }


    }
}
