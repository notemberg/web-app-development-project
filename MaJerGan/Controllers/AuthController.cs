// using Microsoft.AspNetCore.Mvc;
// using MaJerGan.Data;
// using MaJerGan.Models;
// using System.Linq;
// using System.Threading.Tasks;

// namespace MaJerGan.Controllers
// {
//     public class AuthController : Controller
//     {
//         private readonly ApplicationDbContext _context;

//         public AuthController(ApplicationDbContext context)
//         {
//             _context = context;
//         }

//         // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Register
//         [HttpGet]
//         public IActionResult Register()
//         {
//             return View();
//         }

//         [HttpPost]
//         public async Task<IActionResult> Register(User user)
//         {

//             // ‚úÖ Log ‡∏Å‡πà‡∏≠‡∏ô Hash Password
//             Console.WriteLine($"Before Hashing - Password: {user.Password}");

//             // ‚úÖ ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
//             user.SetPassword(user.Password);

//             // ‚úÖ Log ‡∏´‡∏•‡∏±‡∏á Hash Password
//             Console.WriteLine($"After Hashing - PasswordHash: {user.PasswordHash}");

//             _context.Users.Add(user);
//             await _context.SaveChangesAsync();

//             Console.WriteLine("User Saved to Database: " + user.Email);
//             return RedirectToAction("Login");
//         }




//         // ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ Login
//         public IActionResult Login(string email, string password)
//         {
//             var user = _context.Users.FirstOrDefault(u => u.Email == email);
//             if (user == null || !user.VerifyPassword(password))
//             {
//                 ModelState.AddModelError("LoginError", "Invalid email or password");
//                 return View();
//             }

//             // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Session ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//             HttpContext.Session.SetInt32("UserId", user.Id);
//             HttpContext.Session.SetString("Username", user.Username);

//             return RedirectToAction("index", "HOME");
//         }

//         // ‚úÖ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
//         public IActionResult Logout()
//         {
//             HttpContext.Session.Clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Session
//             return RedirectToAction("Login");
//         }
//     }
// }


using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using MaJerGan.Data;
using MaJerGan.Models;

namespace MaJerGan.Controllers
{
    public class AuthController : Controller
    {
        private readonly ApplicationDbContext _context;

        public AuthController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public IActionResult Register()
        {
            return View();
        }

        [Route("api/register")]
        [HttpPost]
        public async Task<IActionResult> Register([FromBody] User user)
        {
            if (_context.Users.Any(u => u.Email == user.Email))
            {
                return BadRequest(new { message = "Email ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!" });
            }

            if (_context.Users.Any(u => u.Username == user.Username))
            {
                return BadRequest(new { message = "Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß!" });
            }

            // ‚úÖ ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            user.SetPassword(user.Password);

            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return Ok(new { message = "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
        }



        // [HttpPost]
        public async Task<IActionResult> Login(string email, string password)
        {
            var user = _context.Users.FirstOrDefault(u => u.Email == email);

            if (user == null || !user.VerifyPassword(password)) // üîπ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Hash ‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            {
                ModelState.AddModelError("LoginError", "Invalid email or password");
                return View();
            }

            // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á `Claims` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö `Authorize`
            var claims = new List<Claim>
            {
                 new Claim(ClaimTypes.Name, user.Username),
                 new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())
            };

            var claimsIdentity = new ClaimsIdentity(claims, "MyCookieAuth");
            var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);


            Console.WriteLine($"User {user.Username} logged in successfully.");

            await HttpContext.SignInAsync("MyCookieAuth", claimsPrincipal);


            return RedirectToAction("Index", "Home"); // üîπ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        }

        [HttpGet]
        public async Task<IActionResult> Logout()
        {
            await HttpContext.SignOutAsync("MyCookieAuth"); // ‚úÖ ‡∏•‡∏ö `Cookie` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö

            return RedirectToAction("Login");
        }
    }
}