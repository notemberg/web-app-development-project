using MaJerGan.Services;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System;
using MaJerGan.Models; // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ using ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô EmailRequest

namespace MaJerGan.Controllers
{
    [Route("api/test")]
    [ApiController]
    public class TestController : ControllerBase
    {
        private readonly EmailService _emailService;

        public TestController(EmailService emailService)
        {
            _emailService = emailService;
        }

        // POST: api/test/send-emails
        [HttpPost("send-emails")]
        public async Task<IActionResult> SendEmails([FromBody] EmailRequest request)
        {
            if (request == null ||
                request.Recipients == null ||
                request.Recipients.Count == 0)
            {
                return BadRequest("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Recipients");
            }

            foreach (var recipient in request.Recipients)
            {
                string subject;
                string body;

                switch (request.TemplateType?.ToLower())
                {
                    case "closed":
                        subject = "Your Event is closed";
                        // HTML + CSS ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
                        body = $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.5;
            color: #333;
        }}
        .title {{
            color: #0072C6;
            font-size: 24px;
            margin-bottom: 10px;
        }}
        .content {{
            margin-bottom: 20px;
        }}
        .footer {{
            color: #888;
            font-size: 14px;
            margin-top: 30px;
        }}
    </style>
</head>
<body>
    <div class='content'>
        <div class='title'>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì {recipient.Username},</div>
        <p>{request.ActivityName} ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</p>
        <p>‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {request.ActivityDate?.ToString("dd/MM/yyyy")} ‡πÄ‡∏ß‡∏•‡∏≤ {request.ActivityTime}</p>
    </div>
    <div class='footer'>
        <p>‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà {request.LocationName}</p>
    </div>
</body>
</html>
";
                        break;

                    case "updated":
                        subject = "Your Event got Updated!";
                        body = $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <style>
        body {{
            font-family: Tahoma, sans-serif;
            margin: 20px;
            line-height: 1.5;
            color: #333;
        }}
        .title {{
            color: #28a745;
            font-size: 24px;
            margin-bottom: 10px;
        }}
        .content {{
            margin-bottom: 20px;
        }}
        .footer {{
            color: #888;
            font-size: 14px;
            margin-top: 30px;
        }}
    </style>
</head>
<body>
    <div class='content'>
        <div class='title'>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì {recipient.Username},</div>
        <p>{request.ActivityName} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</p>
    </div>
    <div class='footer'>
        <p>Thank You</p>
    </div>
</body>
</html>
";
                        break;

                    default:
                        return BadRequest("TemplateType ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'closed' ‡∏´‡∏£‡∏∑‡∏≠ 'updated')");
                }

                // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥ EmailService ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ IsBodyHtml = true)
                await _emailService.SendEmailAsync(recipient.Email, subject, body);
            }

            return Ok("üì® ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        }
    }
}
