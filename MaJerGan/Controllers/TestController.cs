using MaJerGan.Services;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using System;
using MaJerGan.Models; // ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ EmailRequest ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà

namespace MaJerGan.Controllers
{
    [Route("api/test")]
    [ApiController]
    public class TestController : ControllerBase
    {
        private readonly EmailService _emailService;

        public TestController(EmailService emailService)
        {
            _emailService = emailService;
        }

        // POST: api/test/send-emails
        [HttpPost("send-emails")]
        public async Task<IActionResult> SendEmails([FromBody] EmailRequest request)
        {
            if (request == null ||
                request.Recipients == null ||
                request.Recipients.Count == 0)
            {
                return BadRequest("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Recipients");
            }

            // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ Recipient ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
            foreach (var recipient in request.Recipients)
            {
                string subject = string.Empty;
                string body = string.Empty;

                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ï‡∏≤‡∏° request.TemplateType
                switch (request.TemplateType?.ToLower())
                {
                    case "closed":
                        subject = $"{request.ActivityName} is closed";
                        body = $@"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì({recipient.Username}),

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
{request.ActivityName} ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß 
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {request.ActivityDate?.ToString("dd/MM/yyyy")} ‡πÄ‡∏ß‡∏•‡∏≤ {request.ActivityTime}

Meet Me Team
";
                        break;

                    case "updated":
                        subject = $"{request.ActivityName} got Updated!";
                        body = $@"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì({recipient.Username}),

‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
{request.ActivityName} ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°

Meet Me Team
";
                        break;

                    default:
                        // ‡∏´‡∏≤‡∏Å templateType ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö "closed" ‡∏´‡∏£‡∏∑‡∏≠ "updated"
                        return BadRequest("TemplateType ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'closed' ‡∏´‡∏£‡∏∑‡∏≠ 'updated')");
                }

                // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á recipient.Email
                await _emailService.SendEmailAsync(recipient.Email, subject, body);
            }

            return Ok("üì® ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        }
    }
}