@model MaJerGan.Models.Event

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Event</title>
    <link rel="stylesheet" href="~/css/create.css" />
    
</head>
<script src="~/js/Tag.js">
</script>
<body>

    <div class="content">
        <div class="form-container">
            <h2>‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà ‚ú®</h2>

            <form asp-action="Create" method="post">
                <label>üìå ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
                <input asp-for="Title" required />

                <label>üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:</label>
                <textarea asp-for="Description" rows="4"></textarea>

                <label>üè∑Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ó‡πá‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
                <div class="carousel-container">
                    <button id="prev-btn" class="carousel-btn">‚ùÆ</button>
                    <div class="carousel">
                        <div id="tag-carousel" class="carousel-content"></div>
                    </div>
                    <button id="next-btn" class="carousel-btn">‚ùØ</button>
                </div>

                <!-- ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å -->
                <label>‚ûï ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á:</label>
                <input type="text" id="custom-tag-input" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ó‡πá‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter" />

                <!-- ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å -->
                <div id="selected-tags-container"></div>

                <!-- Input ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å -->
                <input type="hidden" asp-for="Tags" id="selected-tags" />

                <label>üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö:</label>
                <input asp-for="MaxParticipants" type="number" required />

                <label>üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</label>
                <input asp-for="EventTime" type="datetime-local" required />

                <label>‚è≥ ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏:</label>
                <input asp-for="ExpiryDate" type="datetime-local" required />

                <label>üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</label>
                <textarea asp-for="ExtraInfo" rows="3"></textarea>

                <button type="submit" class="submit-btn">üöÄ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏•‡∏¢!</button>
            </form>
        </div>
    </div>

</body>

</html>

@* <script>
    document.addEventListener("DOMContentLoaded",function () {
        const tagContainer = document.getElementById("tag-container");
        const selectedTagsContainer = document.getElementById("selected-tags-container");
        const selectedTagsInput = document.getElementById("selected-tags");
        const customTagInput = document.getElementById("custom-tag-input");

        let selectedTags = new Set();

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ó‡πá‡∏Å‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        async function loadTags() {
            try {
                const response = await fetch("/api/tags");
                const tags = await response.json();
                tagContainer.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏Å‡πà‡∏≤
                tags.forEach(tag => {
                    createTagButton(tag);
                });
            } catch (error) {
                console.error("Error loading tags:",error);
            }
        }

        function createTagButton(tag) {
            let button = document.createElement("button");
            button.className = "tag-btn";
            button.innerText = tag;
            button.dataset.tag = tag;
            button.addEventListener("click",function () {
                toggleTag(tag,button);
            });
            tagContainer.appendChild(button);
        }

        function toggleTag(tag,button) {
            if (selectedTags.has(tag)) {
                selectedTags.delete(tag);
                button.classList.remove("active");
            } else {
                selectedTags.add(tag);
                button.classList.add("active");
            }
            updateTags();
        }

        function updateTags() {
            selectedTagsContainer.innerHTML = "";
            selectedTags.forEach(tag => {
                let tagElement = document.createElement("div");
                tagElement.className = "selected-tag";
                tagElement.innerHTML = `${tag} <span class="remove-tag" data-tag="${tag}">‚ùå</span>`;
                selectedTagsContainer.appendChild(tagElement);
            });

            selectedTagsInput.value = Array.from(selectedTags).join(",");
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Database ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        customTagInput.addEventListener("keypress",async function (e) {
            if (e.key === "Enter" && this.value.trim() !== "") {
                let newTag = this.value.trim();
                this.value = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ input
                e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ submit form

                try {
                    const response = await fetch("/api/tags",{
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ name: newTag })
                    });

                    if (response.ok) {
                        const addedTag = await response.json();
                        createTagButton(addedTag.name); // ‚úÖ ‡πÉ‡∏ä‡πâ `.name` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string
                        selectedTags.add(addedTag.name); // ‚úÖ ‡πÉ‡∏ä‡πâ `.name` ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
                        updateTags();
                    } else if (response.status === 409) {
                        alert("‡πÅ‡∏ó‡πá‡∏Å‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!");
                    } else {
                        throw new Error("Error adding tag");
                    }
                } catch (error) {
                    console.error("Error:",error);
                }
            }
        });

        // ‚úÖ ‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        selectedTagsContainer.addEventListener("click",function (e) {
            if (e.target.classList.contains("remove-tag")) {
                let tag = e.target.getAttribute("data-tag");
                selectedTags.delete(tag);
                document.querySelector(`.tag-btn[data-tag="${tag}"]`)?.classList.remove("active");
                updateTags();
            }
        });

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ó‡πá‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        loadTags();
    });
</script> *@

