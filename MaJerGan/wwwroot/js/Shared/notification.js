document.addEventListener("DOMContentLoaded", function () {
    const notificationButton = document.getElementById("notificationButton");
    const notificationDropdown = document.getElementById("notificationDropdown");
    const markAllAsReadButton = document.getElementById("markAllAsRead");

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!userId || userId === "null") {
        console.warn("‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö, ‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î WebSocket ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
        notificationButton.style.display = "none"; // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        return;
    }

    console.log(`‚úÖ ‡πÉ‡∏ä‡πâ userId: ${userId}`);

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á WebSocket URL ‡∏ï‡∏≤‡∏° userId
    const protocol = window.location.protocol === "https:" ? "wss://" : "ws://";
    const socketUrl = `${protocol}${window.location.host}/ws-notification?userId=${userId}`;
    const notificationSocket = new WebSocket(socketUrl);

    // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏° üîî
    notificationButton.addEventListener("click", function (event) {
        event.stopPropagation();
        notificationDropdown.classList.toggle("show");
    });

    // ‚úÖ ‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
    document.addEventListener("click", function (event) {
        if (!notificationDropdown.contains(event.target) && !notificationButton.contains(event.target)) {
            notificationDropdown.classList.remove("show");
        }
    });

    // ‚úÖ WebSocket Event Handlers
    notificationSocket.onopen = function () {
        console.log(`‚úÖ WebSocket ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö User ${userId}`);
    };

    notificationSocket.onerror = function (error) {
        console.log(`‚ùå WebSocket Error: ${error}`);
    };

    notificationSocket.onclose = function () {
        console.log(`‚ùå WebSocket ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î`);
    };

    notificationSocket.onmessage = function (event) {
        console.log("üîî Notification received: ", event.data);
        const notificationList = document.getElementById("notification-list");

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        const notification = document.createElement("div");
        notification.classList.add("notification-item", "unread");
        notification.innerHTML = `<p>${event.data}</p>`;
        notificationList.prepend(notification);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        updateNotificationCount();
    };

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å API
    fetch(`/api/notifications/user/${userId}`)
        .then(response => response.json())
        .then(data => {
            const notificationList = document.getElementById("notification-list");
            notificationList.innerHTML = "";
            data.forEach(noti => {
                const notification = document.createElement("div");
                notification.classList.add("notification-item");
                if (noti.status === "Unread") {
                    notification.classList.add("unread");
                }
                notification.innerHTML = `<p>${noti.message}</p>`;
                notificationList.appendChild(notification);
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            updateNotificationCount(data.length);
        })
        .catch(error => console.error("Error fetching notifications:", error));

    // ‚úÖ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô "‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
    markAllAsReadButton.addEventListener("click", function () {
        fetch(`/api/notifications/markAllAsRead/${userId}`, { method: "POST" })
            .then(() => {
                document.querySelectorAll(".notification-item.unread").forEach(item => {
                    item.classList.remove("unread");
                });
                updateNotificationCount(0);
            })
            .catch(error => console.error("Error marking all as read:", error));
    });

    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    function updateNotificationCount(count = null) {
        const badge = document.getElementById("notification-count");
        if (count === null) {
            count = document.querySelectorAll(".notification-item.unread").length;
        }
        badge.innerText = count;
        badge.style.display = count > 0 ? "block" : "none";
    }
});
