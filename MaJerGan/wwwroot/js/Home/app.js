// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏ä‡πâ HTTP ‡∏´‡∏£‡∏∑‡∏≠ HTTPS
const protocol1 = window.location.protocol === "https:" ? "wss://" : "ws://";

// ‚úÖ ‡πÉ‡∏ä‡πâ hostname ‡πÅ‡∏•‡∏∞ port ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
const socketUrl1 = `${protocol1}${window.location.host}/ws`;

const socket = new WebSocket(socketUrl1); // ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

socket.onopen = () => {
  console.log("‚úÖ WebSocket Connected");
};

socket.onmessage = (event) => {
  console.log("üì© Message from server:", event.data);

  if (
    event.data === "New Event Added!" ||
    event.data === "Event Joined!" ||
    event.data === "Event Deleted!"
  ) {
    fetchEvents(); // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  }
};

socket.onerror = (error) => {
  console.error("‚ùå WebSocket Error:", error);
};

socket.onclose = () => {
  console.log("‚ùå WebSocket Disconnected");
};

// ‚úÖ 2Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå (‡∏à‡∏≤‡∏Å API)
async function fetchEvents() {
  try {
    const response = await fetch("/Event/GetRecentEvents"); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
    const events = await response.json(); // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô JSON
    updateUI(events); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
  } catch (error) {
    console.error("‚ùå Error fetching events:", error);
  }
}

// ‚úÖ 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
function updateUI(events) {
  const recentContent = document.querySelector(".recent-content");
  recentContent.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤

  if (!events || events.length === 0) {
    recentContent.innerHTML =
      "<p style='text-align:center; color:gray;'>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</p>";
    return;
  }

  events.forEach((event) => {
    const eventCard = document.createElement("div");
    eventCard.classList.add("recent-event-card");
    eventCard.dataset.eventId = event.id;

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ó‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    let tagsArray = (event.tags || "").split(",");
    let limitedTags = tagsArray.slice(0, 3);
    let tagButtons = limitedTags
      .map((tag) => `<button class="tag-button">${tag.trim()}</button>`)
      .join(" ");

    if (tagsArray.length > 3) {
      tagButtons += `<span class="more-tags"> +${
        tagsArray.length - 3
      } more</span>`;
    }

    // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedTime = timeAgo(new Date(event.createdAt));
    const formattedEventTime = formatEventTime(event.eventTime);

    // ‚úÖ ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á HTML
    eventCard.innerHTML = `
            <span class="event-time">${formattedTime}</span>
            <div class="recent-event-content">
                <div class="event-header">
                    <h3 class="event-title">${event.title} <span class="Time"> ${formattedEventTime}</span></h3>
                </div>
                <div class="event-body">
                    <div class="host-container">
                        <div class="creator">Host By: ${event.creator}</div>
                        <div class="participants"><i class="fa-solid fa-user"></i> ${event.currentParticipants} / ${event.maxParticipants} @<span class="location">${event.location}</span></div>
                    </div>
                    <div class="tags-container">Tags:${tagButtons}</div>
                </div>
            </div>
        `;
    recentContent.appendChild(eventCard);
  });

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listener ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ Details
  document.querySelectorAll(".recent-event-card").forEach((card) => {
    card.addEventListener("click", function (e) {
      if (!e.target.classList.contains("tag-button")) {
        window.location.href = `/Event/Details/${this.dataset.eventId}`;
      }
    });
  });
}

// ‚úÖ 4Ô∏è‚É£ ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ WebSocket ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ)
setInterval(fetchEvents, 30000);

// ‚úÖ 5Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
fetchEvents();

// ‚úÖ 6Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô "x ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"
function timeAgo(date) {
  const seconds = Math.floor((new Date() - date) / 1000);
  if (seconds < 60) return "Just now";
  const minutes = Math.floor(seconds / 60);
  if (minutes < 60) return `${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  const hours = Math.floor(minutes / 60);
  if (hours < 24) return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
  const days = Math.floor(hours / 24);
  return `${days} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
}

// ‚úÖ 7Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á `eventTime` ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 28/02/25 at 3:30 PM
function formatEventTime(isoDate) {
  const date = new Date(isoDate);
  const day = String(date.getDate()).padStart(2, "0");
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const year = String(date.getFullYear()).slice(-2);
  let hours = date.getHours();
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const ampm = hours >= 12 ? "PM" : "AM";
  hours = hours % 12 || 12;
  return `${day}/${month}/${year} at ${hours}:${minutes} ${ampm}`;
}
