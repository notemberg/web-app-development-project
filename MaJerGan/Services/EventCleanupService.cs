using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using MaJerGan.Data;

namespace MaJerGan.Services
{
    public class EventCleanupService : BackgroundService
    {
        private readonly IServiceScopeFactory _scopeFactory;
        private readonly EmailService _emailService;

        public EventCleanupService(IServiceScopeFactory scopeFactory, EmailService emailService)
        {
            _scopeFactory = scopeFactory;
            _emailService = emailService;
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            while (!stoppingToken.IsCancellationRequested)
            {
                using (var scope = _scopeFactory.CreateScope())
                {
                    var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
                    var now = DateTime.Now;
                    Console.WriteLine($"üîÑ Background Service ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {now}");

                    // ‡∏´‡∏≤ Event ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î: ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (ExpiryDate < now) ‡∏´‡∏£‡∏∑‡∏≠ EventTime < now ‡πÅ‡∏•‡∏∞ IsClosed ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô false
                    var expiredEvents = await dbContext.Events
                        .Where(e =>
                            ((e.ExpiryDate < now) || (e.EventTime < now))
                            && !e.IsClosed
                        )
                        .ToListAsync();

                    Console.WriteLine($"üìå ‡∏û‡∏ö {expiredEvents.Count} Event ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏¥‡∏î");

                    if (expiredEvents.Any())
                    {
                        foreach (var evt in expiredEvents)
                        {
                            evt.IsClosed = true;
                            Console.WriteLine($"‚úÖ ‡∏õ‡∏¥‡∏î Event ID: {evt.Id} {evt.Title}");

                            // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏á Event
                            var participants = await dbContext.EventParticipants
                                .Include(p => p.User)
                                .Where(p => p.EventId == evt.Id)
                                .ToListAsync();

                            // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á Closed ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Participant
                            foreach (var participant in participants)
                            {
                                // subject/body ‡πÅ‡∏ö‡∏ö HTML
                                var subject = "Your Event is Closed";
                                var body = $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.5;
            color: #333;
        }}
        .title {{
            color: #0072C6;
            font-size: 24px;
            margin-bottom: 10px;
        }}
        .content {{
            margin-bottom: 20px;
        }}
        .footer {{
            color: #888;
            font-size: 14px;
            margin-top: 30px;
        }}
    </style>
</head>
<body>
    <div class='content'>
        <div class='title'>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏Ñ‡∏∏‡∏ì({participant.User.Username}),</div>
        <p>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° <b>{evt.Title}</b> ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß</p>
        <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {evt.EventTime:dd/MM/yyyy} ‡πÄ‡∏ß‡∏•‡∏≤ {evt.EventTime:HH:mm}</p>
    </div>
    <div class='footer'>
        <p>Meet Me Team</p>
    </div>
</body>
</html>";

                                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å EmailService ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
                                await _emailService.SendEmailAsync(participant.User.Email, subject, body);
                                Console.WriteLine($"üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á {participant.User.Email} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
                            }
                        }

                        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ IsClosed ‡∏•‡∏á‡πÉ‡∏ô DB
                        await dbContext.SaveChangesAsync();
                    }
                }

                // ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                await Task.Delay(TimeSpan.FromSeconds(10), stoppingToken);
            }
        }
    }
}
